// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Digital business card fields
  clubId        String?
  club          Club?     @relation(fields: [clubId], references: [id])
  realName      String?
  phoneNumber   String?
  nickname      String?
  wechat        String?
  selfIntro     String?   @db.Text
  gender        Gender?
  occupation    String?
  field         ProfessionalField?
  status        UserStatus?

  // Optional fields
  resources     String?   @db.Text
  helpNeeded    String?   @db.Text
  projects      Project[]
  socialLinks   SocialLink[]

  // Community participation
  level         Int       @default(0)
  eventRegistrations EventRegistration[]

  // Unique URL slug
  slug          String?   @unique
}

model Club {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  members       User[]
  events        Event[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  imageUrl      String?
  projectUrl    String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SocialLink {
  id            String    @id @default(cuid())
  platform      String
  url           String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Event {
  id            String    @id @default(cuid())
  title         String
  content       String    @db.Text
  location      String?
  startDate     DateTime
  endDate       DateTime?
  clubId        String
  club          Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  requiresApproval Boolean @default(false)
  registrations EventRegistration[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model EventRegistration {
  id            String    @id @default(cuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status        RegistrationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([eventId, userId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ProfessionalField {
  DEVELOPMENT
  PRODUCT
  DESIGN
  OPERATIONS
  HARDWARE
  SALES
  RESEARCH
  MEDIA
  CONSULTING
  INVESTMENT
  STUDENT
  ART
  LEGAL
  TEACHING
  OTHER
}

enum UserStatus {
  EMPLOYED
  STARTUP
  FREELANCE
  JOB_SEEKING
  STUDENT
  OTHER
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

